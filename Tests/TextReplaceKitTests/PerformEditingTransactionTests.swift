import Testing
@testable import TextReplaceKit
import UIKit

@MainActor
@Suite("ÊñáÂ≠óÊï∞„ÅåÊ∏õ„Çã„Ç±„Éº„Çπ")
struct ReplaceAndAdjutSelectedTextRangeTests {
    @Test("[]:emoji: -> []üêà")
    func replace() async throws {
        let textView = UITextView()
        textView.text = ":emoji:"
        textView.selectedRange = NSRange(location: 0, length: 0)
        #expect(textView.visualText == "[]:emoji:")
        textView.replaceAndAdjutSelectedTextRange(textView.documentRange, withAttributedText: NSAttributedString(string: "üêà"))
        #expect(textView.visualText == "[]üêà")
    }
    
    @Test(":emoji:[] -> üêà[]")
    func replace2() async throws {
        let textView = UITextView()
        textView.text = ":emoji:"
        textView.selectedRange = NSRange(location: 7, length: 0)
        #expect(textView.visualText == ":emoji:[]")
        textView.replaceAndAdjutSelectedTextRange( textView.documentRange, withAttributedText: NSAttributedString(string: "üêà"))
        #expect(textView.visualText == "üêà[]")
    }
    
    @Test(":emo[]ji: -> üêà[]")
    func replace3() async throws {
        let textView = UITextView()
        textView.text = ":emoji:"
        textView.selectedRange = NSRange(location: 4, length: 0)
        #expect(textView.visualText == ":emo[]ji:")
        textView.replaceAndAdjutSelectedTextRange( textView.documentRange, withAttributedText: NSAttributedString(string: "üêà"))
        #expect(textView.visualText == "üêà[]")
    }
    
    @Test(":em[oj]i: -> üêà[]")
    func replace4() async throws {
        let textView = UITextView()
        textView.text = ":emoji:"
        textView.selectedRange = NSRange(location: 3, length: 2)
        #expect(textView.visualText == ":em[oj]i:")
        textView.replaceAndAdjutSelectedTextRange( textView.documentRange, withAttributedText: NSAttributedString(string: "üêà"))
        #expect(textView.visualText == "üêà[]")
    }
    
    @Test(":emo[ji:] -> üêà[]")
    func replace5() async throws {
        let textView = UITextView()
        textView.text = ":emoji:"
        textView.selectedRange = NSRange(location: 4, length: 3)
        #expect(textView.visualText == ":emo[ji:]")
        textView.replaceAndAdjutSelectedTextRange( textView.documentRange, withAttributedText: NSAttributedString(string: "üêà"))
        #expect(textView.visualText == "üêà[]")
    }
    
    @Test("head[er:emoji:foo]ter -> head[erüêàfoo]ter")
    func replace6() async throws {
        let textView = UITextView()
        textView.text = "header:emoji:footer"
        textView.selectedRange = NSRange(location: 4, length: 12)
        #expect(textView.visualText == "head[er:emoji:foo]ter")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 7)!, withAttributedText: NSAttributedString(string: "üêà"))
        #expect(textView.visualText == "head[erüêàfoo]ter")
    }
    
    @Test("header:emoji:[footer] -> headerüêà[footer]")
    func replace7() async throws {
        let textView = UITextView()
        textView.text = "header:emoji:footer"
        textView.selectedRange = NSRange(location: 13, length: 6)
        #expect(textView.visualText == "header:emoji:[footer]")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 7)!, withAttributedText: NSAttributedString(string: "üêà"))

        #expect(textView.visualText == "headerüêà[footer]")
    }
    
    @Test("he[a]der:emoji:footer -> he[a]derüêàfooter")
    func replace8() async throws {
        let textView = UITextView()
        textView.text = "header:emoji:footer"
        textView.selectedRange = NSRange(location: 2, length: 1)
        #expect(textView.visualText == "he[a]der:emoji:footer")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 7)!, withAttributedText: NSAttributedString(string: "üêà"))

        #expect(textView.visualText == "he[a]derüêàfooter")
    }
    
    @Test("header:emoji:fo[o]ter -> headerüêàfo[o]ter")
    func replace9() async throws {
        let textView = UITextView()
        textView.text = "header:emoji:footer"
        textView.selectedRange = NSRange(location: 15, length: 1)
        #expect(textView.visualText == "header:emoji:fo[o]ter")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 7)!, withAttributedText: NSAttributedString(string: "üêà"))

        #expect(textView.visualText == "headerüêàfo[o]ter")
    }
    
    @Test("head[er:emoji:]footer -> head[erüêà]footer")
    func replace10() async throws {
        let textView = UITextView()
        textView.text = "header:emoji:footer"
        textView.selectedRange = NSRange(location: 4, length: 9)
        #expect(textView.visualText == "head[er:emoji:]footer")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 7)!, withAttributedText: NSAttributedString(string: "üêà"))

        #expect(textView.visualText == "head[erüêà]footer")
    }
    
    @Test("[header:emo]ji:footer -> [headerüêà]footer")
    func replace11() async throws {
        let textView = UITextView()
        textView.text = "header:emoji:footer"
        textView.selectedRange = NSRange(location: 0, length: 10)
        #expect(textView.visualText == "[header:emo]ji:footer")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 7)!, withAttributedText: NSAttributedString(string: "üêà"))

        #expect(textView.visualText == "[headerüêà]footer")
    }
    
    @Test("header:em[oji:foot]er -> headerüêà[foot]er")
    func replace12() async throws {
        let textView = UITextView()
        textView.text = "header:emoji:footer"
        textView.selectedRange = NSRange(location: 9, length: 8)
        #expect(textView.visualText == "header:em[oji:foot]er")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 7)!, withAttributedText: NSAttributedString(string: "üêà"))

        #expect(textView.visualText == "headerüêà[foot]er")
    }
}

@MainActor
@Suite("ÊñáÂ≠óÊï∞„ÅåÂ¢ó„Åà„Çã„Ç±„Éº„Çπ")
struct ReplaceAndAdjutSelectedTextRangeTests2 {
    @Test("[]üêà -> []:cat:")
    func replace() async throws {
        let textView = UITextView()
        textView.text = "üêà"
        textView.selectedRange = NSRange(location: 0, length: 0)
        #expect(textView.visualText == "[]üêà")
        textView.replaceAndAdjutSelectedTextRange( textView.documentRange, withAttributedText: NSAttributedString(string: ":cat:"))
        #expect(textView.visualText == "[]:cat:")
    }
    
    @Test("üêà[] -> :cat:[]")
    func replace2() async throws {
        let textView = UITextView()
        textView.text = "üêà"
        textView.selectedRange = NSRange(location: 7, length: 0)
        #expect(textView.visualText == "üêà[]")
        textView.replaceAndAdjutSelectedTextRange( textView.documentRange, withAttributedText: NSAttributedString(string: ":cat:"))
        #expect(textView.visualText == ":cat:[]")
    }
    
    @Test("head[erüêàfoo]ter -> head[er:cat:foo]ter")
    func replace6() async throws {
        let textView = UITextView()
        textView.text = "headerüêàfooter"
        textView.selectedRange = NSRange(location: 4, length: 7)
        #expect(textView.visualText == "head[erüêàfoo]ter")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 2)!, withAttributedText: NSAttributedString(string: ":cat:"))
        #expect(textView.visualText == "head[er:cat:foo]ter")
    }
    
    @Test("headerüêà[footer] -> header:cat:[footer]")
    func replace7() async throws {
        let textView = UITextView()
        textView.text = "headerüêàfooter"
        textView.selectedRange = NSRange(location: 8, length: 6)
        #expect(textView.visualText == "headerüêà[footer]")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 2)!, withAttributedText: NSAttributedString(string: ":cat:"))

        #expect(textView.visualText == "header:cat:[footer]")
    }
    
    @Test("he[a]derüêàfooter -> he[a]der:cat:footer")
    func replace8() async throws {
        let textView = UITextView()
        textView.text = "headerüêàfooter"
        textView.selectedRange = NSRange(location: 2, length: 1)
        #expect(textView.visualText == "he[a]derüêàfooter")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 2)!, withAttributedText: NSAttributedString(string: ":cat:"))

        #expect(textView.visualText == "he[a]der:cat:footer")
    }
    
    @Test("headerüêàfo[o]ter -> header:cat:fo[o]ter")
    func replace9() async throws {
        let textView = UITextView()
        textView.text = "headerüêàfooter"
        textView.selectedRange = NSRange(location: 10, length: 1)
        #expect(textView.visualText == "headerüêàfo[o]ter")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 2)!, withAttributedText: NSAttributedString(string: ":cat:"))

        #expect(textView.visualText == "header:cat:fo[o]ter")
    }
    
    @Test("head[erüêà]footer -> head[er:cat:]footer")
    func replace10() async throws {
        let textView = UITextView()
        textView.text = "headerüêàfooter"
        textView.selectedRange = NSRange(location: 4, length: 4)
        #expect(textView.visualText == "head[erüêà]footer")
        textView.replaceAndAdjutSelectedTextRange( textView.textRange(location: 6, length: 2)!, withAttributedText: NSAttributedString(string: ":cat:"))

        #expect(textView.visualText == "head[er:cat:]footer")
    }
}
